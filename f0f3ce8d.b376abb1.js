(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{161:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return c}));var r=t(2),a=t(9),i=(t(0),t(168)),o={id:"grouping-field-data",title:"Grouping Field Data",sidebar_label:"Grouping Field Data"},l={id:"recipes/grouping-field-data",title:"Grouping Field Data",description:"`useFluentForm` returns multiple objects containing data for each field: `values`, `errors`, `fields` etc..",source:"@site/docs/recipes/grouping-field-data.md",permalink:"/react-fluent-form-docs/docs/recipes/grouping-field-data",editUrl:"https://github.com/ysfaran/react-fluent-form-docs/edit/master/docs/recipes/grouping-field-data.md",sidebar_label:"Grouping Field Data",sidebar:"someSidebar",previous:{title:"Single Submission Handler",permalink:"/react-fluent-form-docs/docs/recipes/single-submission-handler"},next:{title:"addField",permalink:"/react-fluent-form-docs/docs/api/add-field"}},s=[{value:"useFieldData",id:"usefielddata",children:[]},{value:"Example",id:"example",children:[]}],d={rightToc:s};function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"useFluentForm")," returns multiple objects containing data for each field: ",Object(i.b)("inlineCode",{parentName:"p"},"values"),", ",Object(i.b)("inlineCode",{parentName:"p"},"errors"),", ",Object(i.b)("inlineCode",{parentName:"p"},"fields")," etc..\nThese field data are grouped by their concerns (e.g. the concern of ",Object(i.b)("inlineCode",{parentName:"p"},"values")," is to store all current values).\nThis can be perfectly fine for a lot of apps, but for others it could limit the possiblities to design the architecture."),Object(i.b)("p",null,"It might be more useful to put all information, that belongs to a field, into one place. Instead of having ",Object(i.b)("inlineCode",{parentName:"p"},"values"),", ",Object(i.b)("inlineCode",{parentName:"p"},"errors"),", ",Object(i.b)("inlineCode",{parentName:"p"},"fields")," etc. you could've e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"name")," and ",Object(i.b)("inlineCode",{parentName:"p"},"password")," objects that contain properties for ",Object(i.b)("inlineCode",{parentName:"p"},"values"),", ",Object(i.b)("inlineCode",{parentName:"p"},"errors"),", ",Object(i.b)("inlineCode",{parentName:"p"},"fields")," etc.."),Object(i.b)("h2",{id:"usefielddata"},"useFieldData"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"useFieldData")," receives a fluent form instance as parameter and will put all information for each field in a seperate object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import { useMemo } from "react";\nimport {\n  ExtractErrorsType,\n  ExtractFieldsType,\n  UseFluentForm,\n  FormConfig,\n  MappedFields,\n  ExtractValuesType\n} from "react-fluent-form";\n\nexport type FieldData<Config extends FormConfig> = {\n  [field in keyof ExtractFieldsType<Config>]: {\n    field: MappedFields<ExtractFieldsType<Config>>[field];\n    errors: ExtractErrorsType<Config>[field];\n    validity: boolean | undefined;\n    touched: boolean | undefined;\n    value: ExtractValuesType<Config>[field];\n  };\n};\n\nexport function useFieldData<Config extends FormConfig>({\n  fields,\n  errors,\n  validity,\n  touched,\n  values\n}: UseFluentForm<Config>): FieldData<Config> {\n  return useMemo(() => {\n    const fieldData = {} as FieldData<Config>;\n    const fieldKeys = Object.keys(fields) as Array<keyof FieldData<Config>>;\n\n    for (const key of fieldKeys) {\n      fieldData[key] = {\n        field: fields[key],\n        errors: errors[key],\n        validity: validity[key],\n        touched: touched[key],\n        value: values[key]\n      };\n    }\n\n    return fieldData;\n  }, [fields, errors, validity, touched, values]);\n};\n\n')),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("p",null,"Following example contains a fluent form with two fields: ",Object(i.b)("inlineCode",{parentName:"p"},"name")," and ",Object(i.b)("inlineCode",{parentName:"p"},"password"),". ",Object(i.b)("inlineCode",{parentName:"p"},"useFieldData")," will reorganize the state returned by ",Object(i.b)("inlineCode",{parentName:"p"},"useFluentForm")," and group field data by the field itself:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),"interface UserFormModel {\n  name: string;\n  password: string;\n}\n\nconst userConfig = createConfig<UserFormModel>({\n  name: field.string(),\n  password: field.password()\n})\n\nfunction UserForm() {\n  const userForm = useFluentForm(userConfig);\n  \n  const { name, password } = useFieldData(userForm);\n\n  // name and password will have following properties:\n  // field, errors, validity, touched and value\n  \n  return (\n    <NameField {...name} />\n    <PasswordField {...password} />\n    // ...\n  );\n}\n")))}c.isMDXComponent=!0},168:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=a.a.createContext({}),c=function(e){var n=a.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l({},n,{},e)),t},p=function(e){var n=c(e.components);return a.a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},f=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=r,b=p["".concat(o,".").concat(f)]||p[f]||u[f]||i;return t?a.a.createElement(b,l({ref:n},d,{components:t})):a.a.createElement(b,l({ref:n},d))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);