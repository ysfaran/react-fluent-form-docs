(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{148:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return m})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return s}));var r=t(2),a=t(9),o=(t(0),t(168)),i={id:"form-array",title:"Form Array",sidebar_label:"Form Array"},m={id:"advanced/form-array",title:"Form Array",description:"Form arrays are a rather complicated topic, since you need to be able to dynamically add/remove forms on demand. `react-fluent-form` comes with a build in solution by providing two additional hooks: `useFluentFormArray` and `useFluentFormItem`. Keep following image in mind for examples below:",source:"@site/docs/advanced/form-array.md",permalink:"/docs/advanced/form-array",editUrl:"https://github.com/ysfaran/react-fluent-form-docs/edit/master/docs/advanced/form-array.md",sidebar_label:"Form Array",sidebar:"someSidebar",previous:{title:"Customization",permalink:"/docs/getting-started/customization"},next:{title:"What are Recipes?",permalink:"/docs/recipes/what-are-recipes"}},l=[{value:"Creating array config",id:"creating-array-config",children:[]},{value:"Decalaring form array",id:"decalaring-form-array",children:[]},{value:"Declaring form item",id:"declaring-form-item",children:[]},{value:"Adding form items",id:"adding-form-items",children:[]},{value:"Remove form items",id:"remove-form-items",children:[]},{value:"Reading form item state at top level",id:"reading-form-item-state-at-top-level",children:[]},{value:"Resetting array values",id:"resetting-array-values",children:[]},{value:"Handling form array submission",id:"handling-form-array-submission",children:[]}],c={rightToc:l};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Form arrays are a rather complicated topic, since you need to be able to dynamically add/remove forms on demand. ",Object(o.b)("inlineCode",{parentName:"p"},"react-fluent-form")," comes with a build in solution by providing two additional hooks: ",Object(o.b)("inlineCode",{parentName:"p"},"useFluentFormArray")," and ",Object(o.b)("inlineCode",{parentName:"p"},"useFluentFormItem"),". Keep following image in mind for examples below:"),Object(o.b)("p",{align:"center"},Object(o.b)("img",{src:"https://user-images.githubusercontent.com/13695230/75121837-3efce400-5698-11ea-87ce-692bbed5a72f.png",width:"300px",alt:"form-array-example"})),Object(o.b)("h2",{id:"creating-array-config"},"Creating array config"),Object(o.b)("p",null,"Like for single forms you also need to create a config for form arrays but using ",Object(o.b)("inlineCode",{parentName:"p"},"createFormArray")," function instead. It returns similar config as ",Object(o.b)("inlineCode",{parentName:"p"},"createForm")," but with additional configuration properties which are only relevant for form arrays:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withInitialArray"),": specifiy inital values for the form array"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withKeyGenerator"),": items inside of the form array should be identifiable, which is why each form item has a unique key. On default the key will be generated by a key counter. To override this behaviour you can use this function to generate a key based on values.")),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(o.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},Object(o.b)("inlineCode",{parentName:"p"},"withKeyGenerator")," generates the key just ",Object(o.b)("strong",{parentName:"p"},"once")," for each item directly when it's added."))),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'const userRoleConfig = creatForm()({\n  username: field.text(),\n  role: field.select()\n})\n  .withInitialArray([\n    {\n      id: 0,\n      username: "user0",\n      role: "admin"\n    },\n    {\n      id: 1,\n      username: "user1",\n      role: "manager"\n    }\n  ])\n  .withKeyGenerator(item => item.id);\n')),Object(o.b)("h2",{id:"decalaring-form-array"},"Decalaring form array"),Object(o.b)("p",null,"With the created array config you have all you need to declare and initialize the form array."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const UserRoleFormArray = () => {\n  const { formArray, addForm } = useFluentFormArray(arrayConfig);\n\n  return (\n    <form>\n      {formArray.map(item => (\n        <UserRoleForm key={item.key} formItem={item} />\n      ))}\n      <button onClick={addForm}>Add User</button>\n    </form>\n  );\n};\n")),Object(o.b)("h2",{id:"declaring-form-item"},"Declaring form item"),Object(o.b)("p",null,"Form items represent the actual forms inside the form array and can be created via ",Object(o.b)("inlineCode",{parentName:"p"},"useFluentFormItem")," hook.\nSince react hooks can not be called inside of loops (like ",Object(o.b)("inlineCode",{parentName:"p"},"map")," in the example above), ",Object(o.b)("strong",{parentName:"p"},"a new component for form items needs to be implemented"),".\n",Object(o.b)("inlineCode",{parentName:"p"},"useFluentFormItem")," returns the same properties as ",Object(o.b)("inlineCode",{parentName:"p"},"useFluentForm"),", but also following ones:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"removeSelf"),": removes form item from the array"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"key"),": value, which is used to identify form item")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'const UserRoleForm = ({ formItem }) => {\n  const { removeSelf, handleSubmit /* and more.. */ } = useFluentFormItem(\n    formItem\n  );\n\n  return (\n    <div>\n      <label>\n        User:\n        <input {...fields.user} />\n      </label>\n      <label>\n        Role:\n        <select {...fields.role.select}>\n          <option {...fields.role.option("admin")}>Admin</option>\n          <option {...fields.role.option("manager")}>Manager</option>\n        </select>\n      </label>\n      <button onClick={removeSelf}>Remove</button>\n    </div>\n  );\n};\n')),Object(o.b)("h2",{id:"adding-form-items"},"Adding form items"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"useFluentFormArray")," returns a function - ",Object(o.b)("inlineCode",{parentName:"p"},"addForm")," - to add new form items. It optionally receives ",Object(o.b)("inlineCode",{parentName:"p"},"initialValues")," or a key ",Object(o.b)("inlineCode",{parentName:"p"},"key"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'const { formArray, addForm } = useFluentFormArray(arrayConfig);\n\n// will use initial values from config\n// will use key generated by key counter or key generator if specified\naddForm();\n\naddForm({\n  initialValues: {\n    id: 2,\n    username: "user2",\n    role: "admin"\n  }\n});\n\naddForm({\n  key: 100\n});\n')),Object(o.b)("h2",{id:"remove-form-items"},"Remove form items"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"useFluentFormArray")," returns a function - ",Object(o.b)("inlineCode",{parentName:"p"},"removeForm")," - to remove form items, which requires a ",Object(o.b)("inlineCode",{parentName:"p"},"key")," as parameter."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const { formArray, removeForm } = useFluentFormArray(arrayConfig);\n\nremoveForm(0);\nremoveForm(100);\n")),Object(o.b)("h2",{id:"reading-form-item-state-at-top-level"},"Reading form item state at top level"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"useFluentFormArray")," returns ",Object(o.b)("inlineCode",{parentName:"p"},"formStates"),", which is an array that stores the state of each form item. It can be accessed via index or via a helper function called ",Object(o.b)("inlineCode",{parentName:"p"},"getFormStateByKey"),"."),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Keys are generally not equal to the index!"))),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'const { formStates, getFormStateByKey } = useFluentFormArray(arrayConfig);\n\nconst firstFormItem = formState[0];\nconst formItemWithKeyHello = getFormStateByKey("hello");\n')),Object(o.b)("h2",{id:"resetting-array-values"},"Resetting array values"),Object(o.b)("p",null,"With ",Object(o.b)("inlineCode",{parentName:"p"},"resetArray")," the from array can be resetted. It will either reset to the array passed to ",Object(o.b)("inlineCode",{parentName:"p"},"withInitialArray")," or to the array set by ",Object(o.b)("inlineCode",{parentName:"p"},"setInitialArray"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),'const userRoleConfig = creatForm()({\n  username: field.text(),\n  role: field.select()\n}).withInitialArray([\n  {\n    id: 0,\n    username: "user0",\n    role: "admin"\n  }\n]);\n\nconst UserRoleFormArray = () => {\n  const { formStates, resetArray, setInitialArray } = useFluentFormArray(\n    userRoleConfig\n  );\n\n  const handleSave = () => {\n    setInitialArray(formStates.map(state => state.values));\n  };\n\n  return (\n    <form>\n      {formArray.map(item => (\n        <UserRoleForm key={item.key} formItem={item} />\n      ))}\n      <button onClick={resetArray}>Reset Form</button>\n      <button onClick={handleSave}>Save Form</button>\n    </form>\n  );\n};\n')),Object(o.b)("h2",{id:"handling-form-array-submission"},"Handling form array submission"),Object(o.b)("p",null,"Form array submission works just equal to single form submission."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),'const UserRoleFormArray = () => {\n  const { formStates, formArray, addForm, handleSubmit } = useFluentFormArray(\n    arrayConfig\n  );\n\n  const handleSubmitSuccess = () => {\n    console.log(formStates.map(state => state.values));\n  };\n\n  const handleSubmitFailure = () => {\n    console.log(formStates.map(state => state.errors));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleSubmitSuccess, handleSubmitFailure)}>\n      {formArray.map(item => (\n        <UserRoleForm key={item.key} formItem={item} />\n      ))}\n      <button onClick={addForm}>add user</button>\n      <button type="submit">Save</button>\n    </form>\n  );\n};\n')))}s.isMDXComponent=!0},168:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return p}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),s=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):m({},n,{},e)),t},b=function(e){var n=s(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=s(t),u=r,p=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return t?a.a.createElement(p,m({ref:n},c,{components:t})):a.a.createElement(p,m({ref:n},c))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var m={};for(var l in n)hasOwnProperty.call(n,l)&&(m[l]=n[l]);m.originalType=e,m.mdxType="string"==typeof e?e:r,i[1]=m;for(var c=2;c<o;c++)i[c]=t[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);