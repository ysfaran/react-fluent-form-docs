(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(2),i=n(9),l=(n(0),n(168)),r={id:"customization",title:"Customization",sidebar_label:"Customization"},o={id:"getting-started/customization",title:"Customization",description:"When working with forms HTML elements are seldom enough to create beatufil and intuitive UI's.",source:"@site/docs/getting-started/customization.md",permalink:"/react-fluent-form-docs/docs/getting-started/customization",editUrl:"https://github.com/ysfaran/react-fluent-form-docs/edit/master/docs/getting-started/customization.md",sidebar_label:"Customization",sidebar:"someSidebar",previous:{title:"Validation",permalink:"/react-fluent-form-docs/docs/getting-started/validation"},next:{title:"Form Array",permalink:"/react-fluent-form-docs/docs/advanced/form-array"}},c=[{value:"Using the raw field",id:"using-the-raw-field",children:[]},{value:"Adding custom fields",id:"adding-custom-fields",children:[]},{value:"Adding custom validator",id:"adding-custom-validator",children:[]}],d={rightToc:c};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"When working with forms HTML elements are seldom enough to create beatufil and intuitive UI's.\nThat's why ",Object(l.b)("inlineCode",{parentName:"p"},"react-fluent-form")," was build to be customizable, so custom field types can be added.\nIn some cases it's enought to use ",Object(l.b)("inlineCode",{parentName:"p"},"field.raw")," (s. below)."),Object(l.b)("p",null,"If you maybe have your own validation library or you just don't like ",Object(l.b)("inlineCode",{parentName:"p"},"yup"),", also a custom validator can be provided."),Object(l.b)("h2",{id:"using-the-raw-field"},"Using the raw field"),Object(l.b)("p",null,"For components like ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/react-datepicker"}),Object(l.b)("inlineCode",{parentName:"a"},"react-datepicker"))," it's not necessary to implement a custom field.\n",Object(l.b)("inlineCode",{parentName:"p"},"react-fluent-form")," comes with a raw field type which works for components with following characteristics:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"it has ",Object(l.b)("inlineCode",{parentName:"li"},"value"),"-like and a ",Object(l.b)("inlineCode",{parentName:"li"},"onChange"),"-like prop"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"value")," has the same type as the first parameter of ",Object(l.b)("inlineCode",{parentName:"li"},"onChange")," handler"),Object(l.b)("li",{parentName:"ul"},"it optionally has a ",Object(l.b)("inlineCode",{parentName:"li"},"onBlur"),"-like prop to indicate when the field is touched")),Object(l.b)("p",null,"*","-like means it must not have the same name, but the same type. E.g. the ",Object(l.b)("inlineCode",{parentName:"p"},"value")," prop in ",Object(l.b)("inlineCode",{parentName:"p"},"react-datepicker")," is called ",Object(l.b)("inlineCode",{parentName:"p"},"selected"),"."),Object(l.b)("p",null,"For raw fields it's required to pass an initial value, otherwise it will be undefined."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'const formConfig = createForm()({\n  // there is also a withOnChangeProp and withOnBlurProp option!\n  dateOfBirth: field.raw(new Date()).withValueProp("selected")\n});\n\nconst MyForm = () => {\n  const { fields } = useFluentForm(formConfig);\n};\n')),Object(l.b)("p",null,"The type of ",Object(l.b)("inlineCode",{parentName:"p"},"fields")," object would look like this:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'type FieldsType = {\n  dateOfBirth: {\n    selected: Date;\n    onChange: (newValue: Date) => void;\n    onBlur: () => void; // will just set the "touched" state to true\n  };\n};\n')),Object(l.b)("h2",{id:"adding-custom-fields"},"Adding custom fields"),Object(l.b)("p",null,"First of all a new class needs to be implemented which extends ",Object(l.b)("inlineCode",{parentName:"p"},"Fields"),", the base class of every field. It's required to implement a function called ",Object(l.b)("inlineCode",{parentName:"p"},"mapToComponentProps")," which receives a parameter with following properties:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"value: ValueType"),": the current value stored in state of ",Object(l.b)("inlineCode",{parentName:"li"},"useFluentForm"),". Map this to the value prop of your component."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"setValue(v: ValueType)"),": whenever your component changed its value, this function should be called (often it's an ",Object(l.b)("inlineCode",{parentName:"li"},"onChange"),"-like event)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"setTouched(value: boolean = true)"),": call this function when your component has been touched. For most cases this function should be called when the ",Object(l.b)("inlineCode",{parentName:"li"},"onBlur")," event was triggered.")),Object(l.b)("p",null,"Imagine you have implemented a custom input field that has an additional prop called ",Object(l.b)("inlineCode",{parentName:"p"},"onClear")," which is called when the input should be cleared. On top of that you have an option to disable this functionality using the ",Object(l.b)("inlineCode",{parentName:"p"},"clearable")," prop:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { Field } from "react-fluent-form";\n\nexport class ClearableTextField extends Field {\n  constructor(initialValue = "") {\n    super(initialValue);\n    this.clearable = true;\n  }\n\n  // add functions to configure your field\n  // NOTE: configuration functions should always return "this" to stay conform to the fluent API syntax\n  isClearable = (value = true) => {\n    this.clearable = value;\n    return this;\n  };\n\n  mapToComponentProps = ({ value, setValue, setTouched }) => ({\n    value,\n    clearable: this.clearable,\n    onBlur: () => {\n      setTouched();\n    },\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    onClear: () => {\n      setValue("");\n    }\n  });\n}\n')),Object(l.b)("p",null,"For convenience purposes there is also a utility function named ",Object(l.b)("inlineCode",{parentName:"p"},"addField")," that adds a custom field to the ",Object(l.b)("inlineCode",{parentName:"p"},"field")," instance exported by ",Object(l.b)("inlineCode",{parentName:"p"},"react-fluent-form")," (which is actually adding a new function to ",Object(l.b)("inlineCode",{parentName:"p"},"FieldCreator.prototype"),"). ",Object(l.b)("inlineCode",{parentName:"p"},"addField")," should be called in a top level file:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { addField } from "react-fluent-form";\n\naddField("clearableText", intialValue => new ClearableTextField(initialValue));\n')),Object(l.b)("p",null,"The newly added field can then be used e.g. like so:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'const formConfig = createForm()({\n  username: field.clearableText("initial value").isClearable(false)\n});\n')),Object(l.b)("h2",{id:"adding-custom-validator"},"Adding custom validator"),Object(l.b)("p",null,"To add a custom validator a class need to be implemented which extends ",Object(l.b)("inlineCode",{parentName:"p"},"Validator"),". The only function that needs to be implemented is ",Object(l.b)("inlineCode",{parentName:"p"},"validateField"),", which is called with following parameters:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"field: KeyType"),": name of the field that should be validated"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"values: ValuesType"),": current values of the form"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"context: object"),": current context value")),Object(l.b)("p",null,"For the sake of simplicity lets assume you just want to have an optional required check on your fields. An implementation could look like following:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { Validator } from "react-fluent-form";\n\nexport class RequiredValidator extends Validator {\n  constructor(requiredFields) {\n    super();\n    this.requiredFields = requiredFields;\n  }\n\n  public validateField(\n    field,\n    values,\n    _context // not relevant for this example\n  ) {\n    if (this.requiredFields[field] && !values[field]) {\n      return "field is required";\n    }\n  }\n}\n')),Object(l.b)("p",null,"Using ",Object(l.b)("inlineCode",{parentName:"p"},"withCustomValidator")," a custom validator can be added to your form config:"),Object(l.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"Attaching a custom validator will remove the ",Object(l.b)("inlineCode",{parentName:"p"},"DefaultValidator"),"."))),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const formConfig = createForm()({\n  username: field.text(),\n  email: field.email(),\n  phone: field.tel()\n}).withCustomValidator(new RequiredValidator({\n  username: true,\n  email: true\n});\n")))}s.isMDXComponent=!0},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=i.a.createContext({}),s=function(e){var t=i.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},u=function(e){var t=s(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),p=a,m=u["".concat(r,".").concat(p)]||u[p]||b[p]||l;return n?i.a.createElement(m,o({ref:t},d,{components:n})):i.a.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var d=2;d<l;d++)r[d]=n[d];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);